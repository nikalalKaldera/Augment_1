import numpy as np
import torch
import torch.nn.functional as F
import argparse
import pickle
from demo_object import *
import random
from tqdm import tqdm
from Skeleton_Normalization.skeleton_normalization import skeleton_normalization

parser = argparse.ArgumentParser(description='Inverse JFT')
# parser.add_argument('-d', '--datapath', default='/home/ntkkh958/My_work/Codes/Augment/backup/Fourier_augment.npz',
#                     help='location of dataset npz file')
# parser.add_argument('-d', '--datapath', default='/home/ntkkh958/My_work/Dataset_preparation/Raw_datasets/NTU15_back/Fourier_data_ntu15_both_train_test.npz',
#                     help='location of dataset npz file')
# parser.add_argument('-l', '--labelpath', default='/home/ntkkh958/My_work/Dataset_preparation/Raw_datasets/NTU15_back/NTU120_15sub_CSub.npz',
#                     help='location of dataset npz file')
parser.add_argument('-d', '--datapath', default='/home/ntkkh958/My_work/Dataset_preparation/Raw_datasets/NTU15_back/Fourier_data_ntu15_both_train_test.npz',
                    help='location of dataset npz file')
parser.add_argument('-l', '--labelpath', default='/home/ntkkh958/My_work/Dataset_preparation/Raw_datasets/NTU15_back/NTU120_15sub_CSub.npz',
                    help='location of dataset npz file')
parser.add_argument('-o', '--label_mix', default='n')
parser.add_argument('-a1', '--amplitude_action', default=110)
parser.add_argument('-a2', '--phase_action', default=71)
parser.add_argument('-i', '--index_1', default=7599)  #, 7473, 7557,
parser.add_argument('-j', '--index_2', default=2968) #,756, 4676,
# parser.add_argument('-j', '--joints', default=25)


def load_data(data):
    npz_data = np.load(data)
    JFT_amplitude, JFT_phase, JFT_min_joint, JFT_max_joint = npz_data['JFT_amplitude'], npz_data['JFT_phase'], \
        npz_data['JFT_min_joint'], npz_data['JFT_max_joint']
    del npz_data
    return JFT_amplitude, JFT_phase, JFT_min_joint, JFT_max_joint


def get_graph_spectral(bone_pair, num_joint):
    A = np.zeros((num_joint, num_joint))
    for i, j in bone_pair:
        A[i, j] = 1
        A[j, i] = 1

    D = np.diag(A.sum(axis=1))
    L = D - A
    Lam, U = np.linalg.eigh(L)
    idx = Lam.argsort()
    P = Lam[idx]
    Q = U.T[idx].T
    return P, Q


def inverse_fourier_transform(freq_spectrum, U, min_val, max_val):
    data_augemented = []
    freq_spec = np.array(freq_spectrum)
    min_val=np.array(min_val).transpose(0, 1, 3, 2) #in M C 1 V out M C V 1
    max_val=np.array(max_val).transpose(0, 1, 3, 2) ##in M C 1 V out M C V 1
    for i in range(freq_spec.shape[0]):
        inter_aug = []
        for c in range(3):
            check_frq_spectrum = freq_spectrum[i][c]
            spatial_spectral= np.real(np.fft.ifft(freq_spectrum[i][c], axis=-1))
            spatial_spectral = min_val[i, c, :, :] + \
                                   (spatial_spectral + 1) * 0.5 * (max_val[i, c, :, :] - min_val[i, c, :, :])
            # spatial_spectral_real = np.abs(np.fft.ifft(freq_spectrum[i][c], axis=-1))
            # spatial_spectral_img = np.fft.ifft(freq_spectrum[i][c], axis=-1).imag
            coordinates = np.dot(spatial_spectral.T, U.T) #
            inter_aug.append(coordinates)
        data_augemented.append(inter_aug)
    result_aug = np.array(data_augemented)
    return result_aug


if __name__ == '__main__':
    arg = parser.parse_args()
    bone_pairs = ntu_skeleton_bone_pairs
    num_joint = 25
    P, Q = get_graph_spectral(bone_pairs, num_joint)
    JFT_amplitude, JFT_phase, JFT_min_joint, JFT_max_joint = load_data(arg.datapath)  # N C T V M
    # Extract magnitude and phase for the selected samples
    if arg.label_mix == 'y':
        label_data = np.load(arg.labelpath)
        train_label = label_data['y_train']
        train_label_ar = np.where(train_label > 0)[1]
        mag_index_1 = random.choice(np.where(np.array(train_label_ar) == arg.amplitude_action)[0])
        phase_index_2 = random.choice(np.where(np.array(train_label_ar) == arg.phase_action)[0])
        # mag_index_1 = 2145
        # phase_index_2 = 4191
        magnitude_sample1 = JFT_amplitude[mag_index_1]
        phase_sample2 = JFT_phase[phase_index_2]  # M C V T
        print(f"Magnitude index:{mag_index_1}")
        print(f"phase index:{phase_index_2}")
        min_val = JFT_min_joint[phase_index_2]
        max_val = JFT_max_joint[phase_index_2]
    if arg.label_mix == 'n':
        label_data = np.load(arg.labelpath)
        train_label = label_data['y_train']
        train_label_ar = np.where(train_label > 0)[1]
        label_amp = train_label_ar[arg.index_1]
        label_phase = train_label_ar[arg.index_2]
        print(f"Amplitude label:{label_amp}")
        print(f"Phase label:{label_phase}")
        magnitude_sample1 = JFT_amplitude[arg.index_1]
        phase_sample2 = JFT_phase[arg.index_2]  # M C V T
        min_val = JFT_min_joint[arg.index_2]
        max_val = JFT_max_joint[arg.index_2]
    M, C, V, T = np.array(phase_sample2).shape
    '''
    phase_sample2 = np.zeros_like(magnitude_sample1)
    mag_index_1 = arg.index_1

    min_val = JFT_min_joint[mag_index_1]
    max_val = JFT_max_joint[mag_index_1]
    # phase_index_2 = arg.index_2
    # magnitude_sample1 = np.zeros_like(phase_sample2)
    # min_val = JFT_min_joint[phase_index_2]
    # max_val = JFT_max_joint[phase_index_2]
    '''
    #cross propotion mix
    phase_index_2 = arg.index_2
    new_magnitude = 0.5 * magnitude_sample1 + 0.5 * JFT_amplitude[phase_index_2]
    s12 = new_magnitude * (np.e ** (1j * phase_sample2))
    #cross mix amplitude and phase sequences
    # s12 = magnitude_sample1 * (np.e ** (1j * phase_sample2))

    ift_ = inverse_fourier_transform(s12, Q, min_val, max_val)  # M C T V
    #test = ift_.transpose(1, 2, 3, 0) # C T V M
    if (phase_sample2[1] == np.zeros((C, V, T), np.float64)).all():
        ift_[1] = 0
    '''   
    #this for after height normalisation
    ift_ = ift_.transpose(0, 2, 3, 1) # M T V C
    ift_ = np.expand_dims(ift_, axis=0) # 1 M T V C
    ift_ = skeleton_normalization(ift_) #
    ift_ = ift_[0].transpose(0, 3, 1, 2)
    '''
    with open('Augmented_sequence.pkl', 'wb') as f:
        pickle.dump(ift_, f)
    print('Inverse normalisation Done')
